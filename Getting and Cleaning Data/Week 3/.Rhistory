arrange(State, val, Hospital.Name) %>%
summarise(last(Hospital.Name))
} else {
outcomeData <- outcomeData %>%
group_by(State, Hospital.Name) %>%
summarise_(val = interp(~min(outcome), outcome=as.name(outcome))) %>%
arrange(State, val, Hospital.Name) %>%
summarise(nth(Hospital.Name, num))
}
return(outcomeData)
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Format outcome variable
outcome <- gsub(" ", ".", proper(outcome))
outcome <- paste0("Hospital.30.Day.Death..Mortality..Rates.from.", outcome)
# Performn input validation
if(!outcome %in% names(outcomeData)) {
stop("invalid outcome")
}
if(num != "best" || num != "worst") {
if(!is.numeric(num)) {
stop("invalid number")
}
}
# Coerce outcome column to numeric
outcomeData[[outcome]] <- as.numeric(outcomeData[[outcome]])
# Remove NAs
completeCases <- complete.cases(outcomeData[, outcome])
outcomeData <- outcomeData[completeCases, ]
# Group, summarise, arrange and output data
if(num == "best") {
outcomeData <- outcomeData %>%
group_by(State, Hospital.Name) %>%
summarise_(val = interp(~min(outcome), outcome=as.name(outcome))) %>%
arrange(State, val, Hospital.Name) %>%
summarise(first(Hospital.Name))
} else if (num == "worst") {
outcomeData <- outcomeData %>%
group_by(State, Hospital.Name) %>%
summarise_(val = interp(~min(outcome), outcome=as.name(outcome))) %>%
arrange(State, val, Hospital.Name) %>%
summarise(last(Hospital.Name))
} else {
outcomeData <- outcomeData %>%
group_by(State, Hospital.Name) %>%
summarise_(val = interp(~min(outcome), outcome=as.name(outcome))) %>%
arrange(State, val, Hospital.Name) %>%
summarise(nth(Hospital.Name, num))
}
return(outcomeData)
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Format outcome variable
outcome <- gsub(" ", ".", proper(outcome))
outcome <- paste0("Hospital.30.Day.Death..Mortality..Rates.from.", outcome)
# Performn input validation
if(!outcome %in% names(outcomeData)) {
stop("invalid outcome")
}
if(num != "best" | num != "worst") {
if(!is.numeric(num)) {
stop("invalid number")
}
}
# Coerce outcome column to numeric
outcomeData[[outcome]] <- as.numeric(outcomeData[[outcome]])
# Remove NAs
completeCases <- complete.cases(outcomeData[, outcome])
outcomeData <- outcomeData[completeCases, ]
# Group, summarise, arrange and output data
if(num == "best") {
outcomeData <- outcomeData %>%
group_by(State, Hospital.Name) %>%
summarise_(val = interp(~min(outcome), outcome=as.name(outcome))) %>%
arrange(State, val, Hospital.Name) %>%
summarise(first(Hospital.Name))
} else if (num == "worst") {
outcomeData <- outcomeData %>%
group_by(State, Hospital.Name) %>%
summarise_(val = interp(~min(outcome), outcome=as.name(outcome))) %>%
arrange(State, val, Hospital.Name) %>%
summarise(last(Hospital.Name))
} else {
outcomeData <- outcomeData %>%
group_by(State, Hospital.Name) %>%
summarise_(val = interp(~min(outcome), outcome=as.name(outcome))) %>%
arrange(State, val, Hospital.Name) %>%
summarise(nth(Hospital.Name, num))
}
return(outcomeData)
}
tail(rankall("pneumonia", "worst"), 3)
num = "worst"
num != "best"
rankall <- function(outcome, num = "best") {
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Format outcome variable
outcome <- gsub(" ", ".", proper(outcome))
outcome <- paste0("Hospital.30.Day.Death..Mortality..Rates.from.", outcome)
# Performn input validation
if(!outcome %in% names(outcomeData)) {
stop("invalid outcome")
}
if(num != "best" & num != "worst") {
if(!is.numeric(num)) {
stop("invalid number")
}
}
# Coerce outcome column to numeric
outcomeData[[outcome]] <- as.numeric(outcomeData[[outcome]])
# Remove NAs
completeCases <- complete.cases(outcomeData[, outcome])
outcomeData <- outcomeData[completeCases, ]
# Group, summarise, arrange and output data
if(num == "best") {
outcomeData <- outcomeData %>%
group_by(State, Hospital.Name) %>%
summarise_(val = interp(~min(outcome), outcome=as.name(outcome))) %>%
arrange(State, val, Hospital.Name) %>%
summarise(first(Hospital.Name))
} else if (num == "worst") {
outcomeData <- outcomeData %>%
group_by(State, Hospital.Name) %>%
summarise_(val = interp(~min(outcome), outcome=as.name(outcome))) %>%
arrange(State, val, Hospital.Name) %>%
summarise(last(Hospital.Name))
} else {
outcomeData <- outcomeData %>%
group_by(State, Hospital.Name) %>%
summarise_(val = interp(~min(outcome), outcome=as.name(outcome))) %>%
arrange(State, val, Hospital.Name) %>%
summarise(nth(Hospital.Name, num))
}
return(outcomeData)
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r
as.character(subset(r, State == "HI")$Hospital.Name)
as.character(subset(r, State == "HI")$Hospital.Name)
as.character(subset(r, State == "HI"))
as.character(subset(r, State == "HI")r <- rankall("pneumonia", "worst")
r <- rankall("pneumonia", "worst")
r
as.character(subset(r, state == "NJ")
as.character(subset(r, state == "NJ"))
as.character(subset(r, State == "NJ"))
r <- rankall("heart failure", 10)
as.character(subset(r, State == "NV"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "25d74dd2a8b16220bbd5",
secret = "ad3a594b4ebec0f476a966635c79035f577c4941")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "25d74dd2a8b16220bbd5",
secret = "ad3a594b4ebec0f476a966635c79035f577c4941")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("Coursera",
key = "25d74dd2a8b16220bbd5",
secret = "ad3a594b4ebec0f476a966635c79035f577c4941")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
data <- content(req)
data
data$name
data[1]
data
unlist(data)
unlistedData <- unlist(data)
unlistedData
as.data.frame(unlistedData)
unlistedData <- as.data.frame(unlist(data))
View(unlistedData)
data['datasharing']
list(data[[4]]$name, data[[4]]$created_at)
list(data[[1]]$name, data[[4]]$created_at)
list(data[[2]]$name, data[[4]]$created_at)
list(data[[3]]$name, data[[4]]$created_at)
list(data[[4]]$name, data[[4]]$created_at)
list(data[[5]]$name, data[[4]]$created_at)
list(data[[6]]$name, data[[4]]$created_at)
list(data[[7]]$name, data[[4]]$created_at)
list(data[[8]]$name, data[[4]]$created_at)
list(data[[9]]$name, data[[4]]$created_at)
for(i in data) {
if(data[[i]]$name == "datasharing") {
ptint(data[[i]]$created_at)
}
}
print(data[[i]]$created_at)
data <- content(req)
for(i in data) {
if(data[[i]]$name == "datasharing") {
print(data[[i]]$created_at)
}
}
for(i in unlist(data) ) {
if(data[[i]]$name == "datasharing") {
print(data[[i]]$created_at)
}
}
dim(data)
length(data)
for(i in data) {
print(i)
if(data[[i]]$name == "datasharing") {
print(data[[i]]$created_at)
}
}
for(i in data) {
print(i)
if(data[i]$name == "datasharing") {
print(data[i]$created_at)
}
}
data[[1]]$name
if(data[[i]]$name == "datasharing") {
print("Found it!")
# print(data[[i]]$created_at)
}
for(i in data) {
if(data[[i]]$name == "datasharing") {
print("Found it!")
# print(data[[i]]$created_at)
}
}
print(i)
print(data[[i]]$name)
print(data[[i]])
print(data[i])
print(i)
data <- content(req)
list(data[[4]]$name, data[[4]]$created_at)
list(data[[8]]$name, data[[4]]$created_at)
list(data[[9]]$name, data[[4]]$created_at)
list(data[[10]]$name, data[[4]]$created_at)
list(data[[11]]$name, data[[4]]$created_at)
list(data[[11]]$name, data[[11]]$created_at)
setwd("~/Coursera/Data-Science-Specialisation/Getting and Cleaning Data/Week2")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "acs.csv")
library(sqldf)
install.packages("sqldf")
library(sqldf)
acs <- read.csv("acs.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50")
sqldf("select * from acs")
sqldf("select pwgtp1 from acs")
View(acs)
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
html2 <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
content2 <- content(html2, as="test")
parsedHtml = htmlParse(content2, asTest=T)
library(XML)
parsedHtml = htmlParse(content2, asTest=T)
parsedHtml = htmlParse(content2, as=T)
parsedHtml = htmlParse(content2, asText=T)
content2 <- content(html2, as="test")
content2 <- content(html2, as="text")
parsedHtml = htmlParse(content2, asText=T)
parsedHtml
content2
parsedHtml
parsedHtml[2,]
parsedHtml[,2]
parsedHtml
rows <- c(10,20,30,100)
split(parsedHtml, "\n")
split(content2, "\n")
split(content2, "\\n")
strsplit(content2, "\n")
splitHtml[rows]
content2 <- content(html2, as="text")
splitHtml <- strsplit(content2, "\n")
rows <- c(10,20,30,100)
splitHtml[rows]
splitHtml <- strsplit(content2, "\n")
splitHtml
splitHtml[rows]
splitHtml[c(10,20,30,100)]
splitHtml
splitHtml[1]
splitHtml[[1]]
splitHtml[[,1]]
splitHtml[[1,]]
splitHtml[,1]
splitHtml[1,]
splitHtml$1
splitHtml[1]
splitHtml[2]
splitHtml[1:2]
splitHtml[1]
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
nchar(htmlCode[rows])
nchar(htmlCode[rows])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "data.for")
read.fwf("data.for")
read.fwf("data.for", widths = c(15,13,13,13), skip = 3, header = T)
read.fwf("data.for", widths = c(15,13,13,13, 13), skip = 3, header = T)
read.fwf("data.for", widths = c(15,13,13,13,8), skip = 3, header = T)
read.fwf("data.for", widths = c(15,13,13,13,8), skip = 3)
read.fwf("data.for", widths = c(15,13,13,13,8), skip = 3, header = T)
read.fwf("data.for", widths = c(15,13,13,13,8), skip = 4)
data <- read.fwf("data.for", widths = c(15,13,13,13,8), skip = 4)
data <- read.fwf("data.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 3)
View(data)
data <- read.fwf("data.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 3, header = T)
data <- read.fwf("data.for", widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4), skip = 4)
View(data)
data[4,]
data[,4]
sum(data[,4])
setwd("~/Coursera/Data-Science-Specialisation/Getting and Cleaning Data/Week 3")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "data.csv")
data <- read.csv("data.csv")
View(data)
data$AGS == 6
data[which(data$AGS == 6 & data$ACR == 3)]
data[which(data$AGS == 6 & data$ACR == 3), ]
data[which(data$AGS == 6 & data$ACR == 3)]
which(data$AGS == 6 & data$ACR == 3)
data[which(data$AGS == 6 & data$ACR == 3)]
data$ACR
data[which(data$AGS == 6)]
data[which(data$AGS == 6)]
data <- read.csv("data.csv")
data[which(data$AGS == 6)]
data[which(data$AGS == 6)]
View(data)
data$AGS
data$AGS == 6
data[which(data$AGS == 6)]
data[data$AGS == 6]
data$AGS == 6
data$AGS == 6 & data$ACR == 3
data$agricultureLogical <- data$AGS == 6 & data$ACR == 3
data[which(agricultureLogical)]
data[which(data$agricultureLogical)]
which(data$agricultureLogical)
which(data$agricultureLogical == T)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "instructor.jpg")
install.packages("jpeg")
library(jpeg)
readJPEG("instructor.jpg")
jpg <- readJPEG("instructor.jpg")
jpg <- readJPEG("instructor.jpg", native = T)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "instructor.jpg")
jpg <- readJPEG("instructor.jpg", native = T)
quantile(jpg, probs = seq(0.3, 0.8))
quantile(jpg, probs = seq(0.3, 0.8))
quantile(jpg, probs = c(0.3, 0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "instructor.jpg", mode = "wb")
jpg <- readJPEG("instructor.jpg", native = T)
quantile(jpg, probs = c(0.3, 0.8))
data2 <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
View(data2)
gdpData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
eduData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
View(gdpData)
View(eduData)
gdpData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", skip = 4)
View(gdpData)
View(eduData)
df <- merge(gdpData, eduData, by.x = 'X', by.y = 'CountryCode')
View(df)
View(eduData)
View(gdpData)
View(gdpData)
gdpData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 215)
dtGDP <- dtGDP[X != ""]
View(df)
dtGDP[, c(1,2,4,5)]
gdpData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 215)
gdpData <- gdpData[X != ""]
gdpData[, c(1,2,4,5)]
gdpData <- gdpData[, c(1,2,4,5)]
setnames(gdpData,
c("X", "X.1", "X.3", "X.4"),
c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
names(gpdData) <- c("CountryCode", "rankingGDP", "Long.Name", "gdp")
names(gdpData) <- c("CountryCode", "rankingGDP", "Long.Name", "gdp")
View(eduData)
df <- merge(gdpData, eduData, all = T)
df <- merge(gdpData, eduData, all = T, by = c("CountryCode"))
df <- merge(gdpData, eduData, all = T, by = c("CountryCode"))
View(df)
df <- merge(gdpData, eduData, by = c("CountryCode"))
View(eduData)
View(gdpData)
gdpData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 232)
View(gdpData)
gdpData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 233)
gdpData <- gdpData[X != ""]
View(df)
gdpData <- gdpData[, c(1,2,4,5)]
names(gdpData) <- c("CountryCode", "rankingGDP", "Long.Name", "gdp")
View(gdpData)
df <- merge(gdpData, eduData, by = c("CountryCode"))
gdpData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 233)
View(df)
View(gdpData)
gdpData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 231)
View(gdpData)
gdpData <- gdpData[X != ""]
gdpData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 231)
gdpData <- gdpData[gdpData$X != ""]
gdpData[X != ""]
gdpData <- gdpData[X != ""]
gdpData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 231)
View(gdpData)
gdpData <- gdpData[X != ""]
gdpData <- gdpData[X != ""]
gdpData[X == ""]
gdpData[gdpData$X == ""]
gdpData[which(dpData$X == "")]
gdpData[which(gdpData$X == "")]
gdpData[which(gdpData$X == "")]
gdpData[which(X == "")]
gdpData[which(gdpData$X == "")]
gdpData[which(gdpData$X == ""), ]
gdpData[X == "", ]
gdpData[gdpData$X == "", ]
gdpData[!gdpData$X == "", ]
gdpData <- gdpData[!gdpData$X == "", ]
gdpData <- gdpData[, c(1,2,4,5)]
names(gdpData) <- c("CountryCode", "rankingGDP", "Long.Name", "gdp")
View(gdpData)
eduData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
df <- merge(gdpData, eduData, by = c("CountryCode"))
View(df)
sum(!is.na(unique(dt$rankingGDP)))
df <- merge(eduData, gdpData, by = c("CountryCode"))
eduData <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
df <- merge(eduData, gdpData, by = c("CountryCode"))
View(df)
df <- merge(eduData, gdpData, by = c("CountryCode"), all = T)
View(df)
sum(!is.na(unique(df$rankingGDP)))
sum(!is.na(unique(dt$rankingGDP)))
sum(!is.na(unique(df$rankingGDP)))
count(!is.na(unique(df$rankingGDP)))
sum(!is.na(unique(df$rankingGDP)))
sum(!is.na(unique(df$rankingGDP)))
sum(unique(df$rankingGDP))
sum(unique(df$rankingGDP), na.rm = T)
unique(df$rankingGDP)
sum(unique(df$rankingGDP))
sum(unique(df$rankingGDP))
sum(unique(df$rankingGDP), na.rm = T)
length(unique(df$rankingGDP))
length(unique(df$rankingGDP))
View(df)
length(unique(df$rankingGDP), na.rm = T)
length(unique(df$rankingGDP))
sum(unique(df$rankingGDP), na.rm = T)
sum(unique(df$rankingGDP))
sum(!is.na(unique(df$rankingGDP)))
length(!is.na(unique(df$rankingGDP)))
sum(!is.na(unique(df$rankingGDP)))
df <- df[order(rankingGDP, decreasing = T), ]
View(df)
df <- df[order(df$rankingGDP, decreasing = T), ]
View(df)
df[14]
df[13]
df$rankingGDP[13]
df$Long.Name.x[13]
df <- df[order(df$rankingGDP, decreasing = T), ]
sum(!is.na(unique(df$rankingGDP)))
df$Long.Name.x[13]
View(df)
tapply(df, df$Income.Group)
unique(df$Income.Group)
tapply(df, unique(df$Income.Group), mean)
tapply(df$rankingGDP, df$Income.Group, mean)
tapply(df$rankingGDP, df$Income.Group, mean, ... = na.rm = T)
tapply(df$rankingGDP, df$Income.Group, mean, na.rm = T)
quantile(df$rankingGDP, probs = seq(0, 1, 0.2), na.rm = TRUE)
quantile(df$rankingGDP, probs = c(0,0.2,0.4,0.6,0.8,1), na.rm = TRUE)
breaks <- quantile(df$rankingGDP, probs = c(0,0.2,0.4,0.6,0.8,1), na.rm = TRUE)
df$quantileGDP <- cut(df$rankingGDP, breaks = breaks)
dt[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
df[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
df[Income.Group == "Lower middle income", .N]
View(data)
View(df)
table(df$Income.Group, df$Rank.Groups)
table(df$Income.Group, df$quantileGDP)
