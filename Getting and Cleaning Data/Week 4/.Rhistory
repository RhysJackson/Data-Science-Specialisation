acquisition_data %>%
group_by(channelGrouping) %>%
summarise(sessions = sum(sessions)) %>%
arrange(desc(sessions)) %>%
ggplot( mapping = aes(x = reorder(channelGrouping, sessions), y = sessions, fill = reorder(channelGrouping, -sessions)) ) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Total Sessions by Channel",
y = "Total Annual Sessions",
x = "Marketing Channel"
) +
guides(fill=FALSE) +
geom_text( mapping = aes(label = sessions), nudge_y = 0.5)
acquisition_data %>%
group_by(channelGrouping) %>%
summarise(sessions = sum(sessions)) %>%
arrange(desc(sessions)) %>%
ggplot( mapping = aes(x = reorder(channelGrouping, sessions), y = sessions, fill = reorder(channelGrouping, -sessions)) ) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Total Sessions by Channel",
y = "Total Annual Sessions",
x = "Marketing Channel"
) +
guides(fill=FALSE) +
geom_text( mapping = aes(label = sessions), nudge_x = -0.5)
acquisition_data %>%
group_by(channelGrouping) %>%
summarise(sessions = sum(sessions)) %>%
arrange(desc(sessions)) %>%
ggplot( mapping = aes(x = reorder(channelGrouping, sessions), y = sessions, fill = reorder(channelGrouping, -sessions)) ) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Total Sessions by Channel",
y = "Total Annual Sessions",
x = "Marketing Channel"
) +
guides(fill=FALSE) +
geom_text( mapping = aes(label = sessions), nudge_y = -0.5)
acquisition_data %>%
group_by(channelGrouping) %>%
summarise(sessions = sum(sessions)) %>%
arrange(desc(sessions)) %>%
ggplot( mapping = aes(x = reorder(channelGrouping, sessions), y = sessions, fill = reorder(channelGrouping, -sessions)) ) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Total Sessions by Channel",
y = "Total Annual Sessions",
x = "Marketing Channel"
) +
guides(fill=FALSE) +
geom_text( mapping = aes(label = sessions))
# Plot Sessions by Channel
acquisition_data %>%
group_by(channelGrouping) %>%
summarise(sessions = sum(sessions)) %>%
arrange(desc(sessions)) %>%
ggplot( mapping = aes(x = reorder(channelGrouping, sessions), y = sessions, fill = reorder(channelGrouping, -sessions)) ) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Total Sessions by Channel",
y = "Total Annual Sessions",
x = "Marketing Channel"
) +
guides(fill=FALSE) +
geom_text( mapping = aes(label = sessions / sum(acquisition_data$sessions)))
acquisition_data %>%
group_by(channelGrouping) %>%
summarise(sessions = sum(sessions)) %>%
arrange(desc(sessions)) %>%
ggplot( mapping = aes(x = reorder(channelGrouping, sessions), y = sessions, fill = reorder(channelGrouping, -sessions)) ) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Total Sessions by Channel",
y = "Total Annual Sessions",
x = "Marketing Channel"
) +
guides(fill=FALSE) +
geom_text( mapping = aes(label = percent(sessions / sum(acquisition_data$sessions)) ))
library(scales)
acquisition_data %>%
group_by(channelGrouping) %>%
summarise(sessions = sum(sessions)) %>%
arrange(desc(sessions)) %>%
ggplot( mapping = aes(x = reorder(channelGrouping, sessions), y = sessions, fill = reorder(channelGrouping, -sessions)) ) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Total Sessions by Channel",
y = "Total Annual Sessions",
x = "Marketing Channel"
) +
guides(fill=FALSE) +
geom_text( mapping = aes(label = percent(sessions / sum(acquisition_data$sessions)) ))
acquisition_data %>%
group_by(channelGrouping, month) %>%
summarise(sessions = sum(sessions)) %>%
ggplot( mapping = aes(x = month, y = sessions, group = channelGrouping, colour = channelGrouping) ) +
geom_line()
acquisition_data %>%
group_by(channelGrouping, month) %>%
summarise(sessions = sum(sessions)) %>%
ggplot( mapping = aes(x = month, y = sessions, group = channelGrouping, colour = channelGrouping) ) +
geom_smooth()
# Plot sessions by Month and Channel
acquisition_data %>%
group_by(channelGrouping, month) %>%
summarise(sessions = sum(sessions)) %>%
ggplot( mapping = aes(x = month, y = sessions, group = channelGrouping, colour = channelGrouping) ) +
geom_line()
acquisition_data %>%
group_by(channelGrouping, month) %>%
summarise(sessions = sum(sessions)) %>%
ggplot( mapping = aes(x = month, y = sessions, group = channelGrouping, colour = channelGrouping) ) +
geom_area()
acquisition_data %>%
group_by(channelGrouping, month) %>%
summarise(sessions = sum(sessions)) %>%
ggplot( mapping = aes(x = month, y = sessions, group = channelGrouping, colour = channelGrouping) ) +
geom_boxplot()
acquisition_data %>%
group_by(channelGrouping, month) %>%
summarise(sessions = sum(sessions)) %>%
ggplot( mapping = aes(x = month, y = sessions, group = channelGrouping, colour = channelGrouping) ) +
geom_path()
acquisition_data %>%
group_by(channelGrouping, month) %>%
summarise(sessions = sum(sessions)) %>%
ggplot( mapping = aes(x = month, y = sessions, group = channelGrouping, colour = channelGrouping) ) +
geom_bar()
acquisition_data %>%
group_by(channelGrouping, month) %>%
ggplot( mapping = aes(x = month, y = sessions, group = channelGrouping, colour = channelGrouping) ) +
summarise(sessions = sum(sessions)) %>%
geom_bar( stat = "identity")
acquisition_data %>%
group_by(channelGrouping, month) %>%
ggplot( mapping = aes(x = month, y = sessions, group = channelGrouping, colour = channelGrouping) ) +
summarise(sessions = sum(sessions)) %>%
geom_line()
# Plot sessions by Month and Channel
acquisition_data %>%
group_by(channelGrouping, month) %>%
summarise(sessions = sum(sessions)) %>%
ggplot( mapping = aes(x = month, y = sessions, group = channelGrouping, colour = channelGrouping) ) +
geom_line()
device_data <- google_analytics_4("904353",
date_range = c("2016-01-01", "2016-12-31"),
metrics = c("sessions", "transactions", "revenue"),
dimensions = c("deviceCategory", "date"),
order = order_type("date", "ASCENDING", "VALUE"),
anti_sample = T)
ga_auth()
device_data <- google_analytics_4("904353",
date_range = c("2016-01-01", "2016-12-31"),
metrics = c("sessions", "transactions", "revenue"),
dimensions = c("deviceCategory", "date"),
order = order_type("date", "ASCENDING", "VALUE"),
anti_sample = T)
date_range = c("2016-01-01", "2016-12-31"),
metrics = c("sessions", "transactions", "transactionRevenue"),
dimensions = c("deviceCategory", "date"),
order = order_type("date", "ASCENDING", "VALUE"),
anti_sample = T)
device_data <- google_analytics_4("904353",
date_range = c("2016-01-01", "2016-12-31"),
metrics = c("sessions", "transactions", "transactionRevenue"),
dimensions = c("deviceCategory", "date"),
order = order_type("date", "ASCENDING", "VALUE"),
anti_sample = T)
ggplot(device_data, mapping = aes( x = date, y = sessions, colour = deviceCategory )) +
geom_bar()
ggplot(device_data, mapping = aes( x = date, y = sessions, colour = deviceCategory )) +
geom_line()
ggplot(device_data, mapping = aes( x = date, y = sessions, colour = deviceCategory )) +
geom_smooth()
ggplot(device_data, mapping = aes( x = date, y = sessions, colour = deviceCategory )) +
geom_line() +
geom_smooth()
ggplot(device_data, mapping = aes( x = date, y = transactionRevenue, colour = deviceCategory )) +
geom_line() +
geom_smooth()
ggplot(device_data, mapping = aes( x = date, y = cumsum(transactionRevenue), colour = deviceCategory )) +
geom_line() +
geom_smooth()
ggplot(device_data, mapping = aes( x = date, y = transactionRevenue, colour = deviceCategory )) +
geom_line() +
geom_smooth()
ggplot(device_data, mapping = aes( x = date, y = transactions, colour = deviceCategory )) +
geom_line() +
geom_smooth()
ggplot(device_data, mapping = aes( x = date, y = transactionRevenue, colour = deviceCategory )) +
geom_line() +
geom_smooth()
ggplot(device_data, mapping = aes( x = date, y = transactions / sessions, colour = deviceCategory )) +
geom_line() +
geom_smooth()
ggplot(device_data, mapping = aes( x = date, y = percent(transactions / sessions), colour = deviceCategory )) +
geom_line() +
geom_smooth()
ggplot(device_data, mapping = aes( x = date, y = transactions / sessions, colour = deviceCategory )) +
geom_line() +
geom_smooth()
# Revenue by Device
ggplot(device_data, mapping = aes( x = date, y = transactionRevenue, colour = deviceCategory )) +
geom_line() +
geom_smooth() +
labs(
title = "Revenue by Device",
y = "Revenue",
x = "Date"
)
ggplot(device_data, mapping = aes( x = date, y = transactions, colour = deviceCategory )) +
geom_line() +
geom_smooth() +
labs(
title = "Transctions by Device",
y = "Transctions",
x = "Date"
)
multiplot(
ggplot(device_data, mapping = aes( x = date, y = sessions, colour = deviceCategory )) +
geom_line() +
geom_smooth() +
labs(
title = "Sessions by Device",
y = "Sessions",
x = "Date"
)
)
acquisition_data <- acquisition_data %>%
mutate(channelGrouping = as.factor(channelGrouping),
dayOfWeekName = as.factor(dayOfWeekName))
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions)) +
barplot( stat = "identify")
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions)) +
geom_bar( stat = "identify")
View(acquisition_data)
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions)) +
geom_bar()
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions)) +
geom_bar( stat = "identify")
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions)) +
geom_bar( stat = "identify")
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions))
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions)) +
geom_line( stat = "identify")
# Session by Day of Week
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions)) +
geom_line()
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions)) +
geom_point()
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions)) +
geom_path()
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions)) +
geom_path()
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions))
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions)) +
geom_bar( stat = "identity")
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions/365)) +
geom_bar( stat = "identity")
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
mutate( dayOfWekeName = factor(dayOfWekeName, levels= c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")) ) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions/365)) +
geom_bar( stat = "identity")
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
mutate( dayOfWeekName = factor(dayOfWeekName, levels= c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")) ) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions/365)) +
geom_bar( stat = "identity")
# Session by Day of Week
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
mutate( dayOfWeekName = factor(dayOfWeekName, levels= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")) ) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions/365)) +
geom_bar( stat = "identity")
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
mutate( dayOfWeekName = factor(dayOfWeekName, levels= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")) ) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions/365, colour = dayOfWeekName)) +
geom_bar( stat = "identity")
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(sessions = sum(sessions)) %>%
mutate( dayOfWeekName = factor(dayOfWeekName, levels= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")) ) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions/365, fill = dayOfWeekName)) +
geom_bar( stat = "identity")
acquisition_data %>%
group_by(dayOfWeekName) %>%
summarise(transactionRevenue = sum(transactionRevenue)) %>%
mutate( dayOfWeekName = factor(dayOfWeekName, levels= c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")) ) %>%
ggplot(acquisition_data, mapping = aes(x = dayOfWeekName, y = sessions/365, fill = dayOfWeekName)) +
geom_bar( stat = "identity")
# Plot Sessions by Channel
acquisition_data %>%
group_by(channelGrouping) %>%
summarise(sessions = sum(sessions)) %>%
arrange(desc(sessions)) %>%
ggplot( mapping = aes(x = reorder(channelGrouping, sessions), y = sessions, fill = reorder(channelGrouping, -sessions)) ) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Total Sessions by Channel",
y = "Total Annual Sessions",
x = "Marketing Channel"
) +
guides(fill=FALSE) +
geom_text( mapping = aes(label = percent(sessions / sum(acquisition_data$sessions)) ))
acquisition_data %>%
group_by(channelGrouping, month) %>%
summarise(sessions = sum(sessions)) %>%
ggplot( mapping = aes(x = month, y = sessions, group = channelGrouping, colour = channelGrouping) ) +
geom_line()
shiny::runApp('G:/rhysj/Documents/Segmentation Tool')
runApp('G:/rhysj/Documents/Segmentation Tool')
devtools::install_github("MarkEdmondson1234/gentelellaShiny")
devtools::install_github("MarkEdmondson1234/googleID")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("MarkEdmondson1234/gentelellaShiny")
devtools::install_github("MarkEdmondson1234/googleID")
shiny::runApp('G:/rhysj/Documents/Segmentation Tool')
devtools::install_github("MarkEdmondson1234/googleAnalyticsR")
install.packages("googleAnalyticsR")
runApp('G:/rhysj/Documents/Segmentation Tool')
runApp('G:/rhysj/Documents/Segmentation Tool')
devtools::install_github("MarkEdmondson1234/googleAnalyticsR")
install.packages("devtools")
devtools::install_github("MarkEdmondson1234/googleAnalyticsR")
install.packages("digest")
install.packages("digest")
devtools::install_github("MarkEdmondson1234/googleAnalyticsR")
shiny::runApp('G:/rhysj/Documents/Segmentation Tool')
install.packages("dygraphs")
runApp('G:/rhysj/Documents/Segmentation Tool')
install.packages("flexdashboard")
runApp('G:/rhysj/Documents/Segmentation Tool')
install.packages("d3heatmap")
runApp('G:/rhysj/Documents/Segmentation Tool')
runExample()
runApp('G:/rhysj/Documents/Segmentation Tool')
options(googleAuthR.securitycode)
options(googleAuthR.securitycode = "gentelellafkjfs24j234123")
options(googleAuthR.securitycode)
options("googleAuthR.securitycode")
runApp('G:/rhysj/Documents/Segmentation Tool')
runApp('G:/rhysj/Documents/Segmentation Tool')
runApp('G:/rhysj/Documents/Segmentation Tool')
runApp('G:/rhysj/Documents/Segmentation Tool')
runApp('G:/rhysj/Documents/Segmentation Tool')
Sys.date() - 365
Sys.Date() - 365
runApp('G:/rhysj/Documents/Segmentation Tool')
library(googleAnalyticsR)
library(tidyverse)
ga_auth()
id <- "904353"
ga_data <- google_analytics_4(viewId = id,
date_range = c(Sys.Date() - 365, Sys.Date()),
metrics = "sessions",
dimensions = c("hour", "dayOfWeekName"))
library(d3heatmap)
d3heatmap::d3heatmap(heatdata, FALSE, FALSE,
dendrogram = "none", cexCol = 0.3)
d3heatmap::d3heatmap(ga_data, FALSE, FALSE,
dendrogram = "none", cexCol = 0.3)
heatdata <- ga_data %>% select(hour, dayOfWeekName, sessions) %>% spread(dayOfWeekName, sessions)
View(heatdata)
d3heatmap::d3heatmap(heatdata, FALSE, FALSE,
dendrogram = "none", cexCol = 0.3)
View(heatdata)
heatdata <- heatdata %>% select(-hour)
View(heatdata)
row.names(heatdata) <- ga_data$hour
ga_data <- google_analytics_4(viewId = id,
date_range = c(Sys.Date() - 365, Sys.Date()),
metrics = "sessions",
dimensions = c("hour", "dayOfWeekName"))
heatdata <- ga_data %>% select(hour, dayOfWeekName, sessions) %>% spread(dayOfWeekName, sessions)
row.names(heatdata) <- heatdata$hour
heatdata <- heatdata %>% select(-hour)
View(heatdata)
d3heatmap::d3heatmap(heatdata, FALSE, FALSE,
dendrogram = "none", cexCol = 0.3)
ga_data <- google_analytics_4(viewId = id,
date_range = c(Sys.Date() - 365, Sys.Date()),
metrics = "sessions",
dimensions = c("hour", "dayOfWeekName"))
heatdata <- ga_data %>% select(hour, dayOfWeekName, sessions) %>% spread(dayOfWeekName, sessions)
row.names(heatdata) <- heatdata$hour
heatdata <- heatdata %>% select(-hour)
d3heatmap::d3heatmap(heatdata, FALSE, FALSE,
dendrogram = "none", cexCol = 0.3)
ga.agg.data <- ga.organic.data %>%
group_by(sourceMedium) %>%
summarise(totalSessions = sum(sessions)) %>%
arrange(desc(totalSessions))
library(tidyverse)
library(tidyverse)
library(googleAuthR)
library(searchConsoleR)
library(modelr)
library(forecast)
startDate <- as.Date("2014-01-01")
ga.organic.data <- google_analytics_4(viewId = viewId,
date_range = c(startDate, endDate),
metrics = c("sessions"),
dimensions = c("date", "sourceMedium"),
filtersExpression = "ga:sourceMedium=~^google / (organic|cpc)$",
max = -1,
anti_sample = T)
ga.organic.data <- google_analytics_4(viewId = viewId,
date_range = c(startDate, endDate),
metrics = c("sessions"),
dimensions = c("date", "sourceMedium"),
filtersExpression = "ga:sourceMedium=~^google / (organic|cpc)$",
max = -1,
anti_sample = T)
ga.organic.data <- google_analytics_4(viewId = viewId,
date_range = c(startDate, endDate),
metrics = c("sessions", "goal3Completions"),
dimensions = c("date", "sourceMedium"),
filtersExpression = "ga:sourceMedium=~^google / (organic|cpc)$",
max = -1,
anti_sample = T)
library(modelr)
library(forecast)
ga.organic.data <- google_analytics_4(viewId = viewId,
date_range = c(startDate, endDate),
metrics = c("sessions", "goal3Completions"),
dimensions = c("date", "sourceMedium"),
filtersExpression = "ga:sourceMedium=~^google / (organic|cpc)$",
max = -1,
anti_sample = T)
viewId <- "73225976"
startDate <- as.Date("2014-01-01")
endDate <- as.Date("2017-01-21")
ga_auth()
library(googleAuthR)
ga.organic.data <- google_analytics_4(viewId = viewId,
date_range = c(startDate, endDate),
metrics = c("sessions", "goal3Completions"),
dimensions = c("date", "sourceMedium"),
filtersExpression = "ga:sourceMedium=~^google / (organic|cpc)$",
max = -1,
anti_sample = T)
install.packages("KernSmooth")
library(KernSmooth)
clear
setwd("~/Coursera/Data-Science-Specialisation/Getting and Cleaning Data/Week 4")
test <- read.csv(file = "UCI HAR Dataset/test/subject_test.txt")
train <- read.csv(file = "UCI HAR Dataset/train/subject_train.txt")
View(test)
View(train)
test_data.files <- list.files("UCI HAR Dataset/test/Inertial Signals/")
ldf <- lapply(test_data.files, read.csv)
test_data.files <- list.files("UCI HAR Dataset/test/Inertial Signals/")
for(i in 1:test_data.files) {
read.csv()
}
ldf <- lapply(test_data.files, read.csv)
test_data.files <- list.files("UCI HAR Dataset/test/Inertial Signals/", full.names = T)
ldf <- lapply(test_data.files, read.csv)
ldf[1]
subject_test <- read.csv(file = "UCI HAR Dataset/test/subject_test.txt")
subject_train <- read.csv(file = "UCI HAR Dataset/train/subject_train.txt")
subject_test.X <- read.csv(file = "UCI HAR Dataset/test/X_test.txt")
suvject_test.Y <- read.csv(file = "UCI HAR Dataset/test/y_test.txt")
subject_test.Y <- read.csv(file = "UCI HAR Dataset/test/y_test.txt")
View(subject_test.X)
View(subject_test.Y)
subject_test.X <- read.csv(file = "UCI HAR Dataset/test/X_test.txt", header = F)
subject_test.Y <- read.csv(file = "UCI HAR Dataset/test/y_test.txt", header = F)
